# # print('Hello world')
# # # ------------------------------------------------------
# # # типы данных
# # # int, float, boolean, str, list, None
# value = None  # задает пустую переменную, которой потом можно присвоить значение
# a = 123
# b = 1.23
# value = 456  # присваиваем значение переменной None
# # # -----------------------------------------------------
# print(value)  # вывод на печать
# print(type(value))  # можно посмотреть тип данных переменной

# # # ------------------------------------------------------
# # # строковый тип
# s = 'hello world'
# print(s)
# # если нужно внутри строки использовать кавычку одинарную, то для обрамления можно использовать двойные кавычки
# str = "hello ' world"
# print(str)
# # или можно использовать эскейп последовательности
# st = 'hello \'world'
# print(st)
# stro = 'hello \nworld'  # перенос на новую строку
# print(stro)

# # ----------------------------------------------------
# # интерполяция
# print(a, b, value)
# # с помощью одинарных кавычек можно вставить текст в это перечисление
# print(a, '---', b, '---', value, '---')
# # можно использовать форматированный вывод, похожий на интерполяцию в C#
# print('{} --- {} --- {} --- '.format(a, b, value))
# # в форматированном способе можно указывать последовательность вывода переменных при помощи нумерации
# print('{1} --- {2} --- {0} --- '.format(a, b, value))
# # можно воспользоваться интерполяцией
# print(f'{a} --- {b} --- {value} ---')
# # -----------------------------------------------------------
# # присвоение логических переменных
# f = True
# d = False
# print(f, d)

# # --------------------------------------------------------------
# # в питоне нет массивов, их заменяют списки
# list = []
# print(list)
# lis = [1, 2, 3, 4, 5]
# print(lis)
# # массив строк задается интерполяцией
# li = ['1', '2', 'world']
# print(li)
# # всписке можно миксовать разные типы данных, хотя так делать не желательно
# listt = ['world', 1, 5, 12.56, True]
# print(listt)

# # list преобразовывает введенные данные в список, например:
# print(list("Hello"))
# # результатом будет ['H', 'e', 'l', 'l', 'o']


# # --------------------------------------------------------------
# # ввод и вывод данных
# # print() # печать данных
# # input() # ввод данных

# print('введите а')
# a = input()
# print('введите b')
# b = input()
# print(a, b)
# print(f'{a}, {b}')
# print('{}, {}'.format(a, b))

# # по умолчанию мы выводим на печать строки, поэтому сумму ввести сразу не получится
# print('введите а')
# a = input()
# print('введите b')
# b = input()
# print(a, b, a+b) # результат будет просто написанные в строку числа

# # чтобы это исправить, надо при присвоении указать тип данных
# print('введите а')
# a = int(input())
# print('введите b')
# b = int(input())
# print(a, b, a+b)

# # ------------------------------------------
# # арифметические операции
# # +, -, *, /, %(остаток от деления), //(деление в целых числах), **
# # **(возведение в степень), ꚛ, ꝋ, *, /, //, %, +, -
# # (), Сокращенные операции

# a = -2  # можно писать числа сразу отрицательными
# b = 8  # можно писать числа с плюсом, если надо
# c = a+b
# print(c)

# # в питоне нет ограничения по длине числа как в C#
# # но это вызывает необходимость округления при работе с вещественными числами
# a = 1.3
# b = 3
# c = a*b
# print(c) # ответ = 3.9000000000000004

# a = 1.3
# b = 3
# c = round(a*b)
# print(c) # ответ = 4

# # можно указать необходимое количество цифр после запятой, конечные нули писаться не будут
# a = 1.3567675
# b = 3
# c = round(a*b,6)
# print(c) # ответ = 4.070302

# #--------------------------------------
# # сокращенные операции
# a=2
# a=a+5 # сокращенное написание a+=5, такое написание работает со всеми арифметическими операциями
# print(a)

# #----------------------------------------
# # логические операции
# # >, >=, <, <=, ==, !=
# # not, end, or - не путать с &, |, ^
# # is, is not, in, not in
# # gen

# a=1>4
# print(a) # ответ = False

# # также можно стравнивать строки
# a='fgh'
# b='fgh'
# print(a==b) # ответ True

# # также можно стравнивать списки
# a=[1,2,3]
# b=[1,2,3]
# print(a==b) # ответ True

# # в питоне можно использовать тройные неравенства
# a=1<3<5
# print(a) # ответ True

# # например
# f=14
# t=12
# x=5
# print(f<t>x)

# # ----------------------------
# # можно искать элементы списка
# f = [1, 2, 3, 4, 5]
# print(f)
# print(2 in f)

# р

# # с помощью логических операторов можно работать непосредственно с элементами списка
# f = [1, 2, 3, 4, 5]
# is_odd = f[0] % 2 == 0 # выясним является ли первый элемент списка четным
# # то же is_odd = not f[0] % 2
# print(is_odd)

# # ------------------------------------
# # управляющие конструкции if, if-else

# a = int(input('a =')) # сразу выводится приглашение к вводу
# b = int(input('b ='))
# if a > b:
#     print(a)
# else:
#     print(b)

# # последовательная проверка условия, операторы if, elif
# username = input('Введите имя: ')
# if username == 'Маша':
#     print('Ура, это же Маша!')
# elif username =='Марина':
#     print('Я Вас так ждал, Марина!')
# elif username == 'Ильнар':
#     print('Ильнар - топ')
# else:
#     print('Привет, ', username)

# # -----------------------------
# # циклы while, else и for

# # получаем инвертированное число
# original = 234
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10
# print(inverted)

# # то же самое с дополнительным условием
# original = 234
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10
# else:
#     print('Пожалуй хватит, ', inverted)

# # цикл for
# for i in 1,2,3,4,5:
#     print(i**2)

# # то же самое
# list = [1,2,3,4,5]
# for i in list:
#     print(i**2)

# # задаем интервал
# r = range(10) # от 0 до 9
# # print(r) # команда напечатает r как строку
# for i in r:    # можно сразу for i in range (10), тогда первая строка не нужна \\ команда напечатает все элементы интервала
#     print(i)

# # как задать интервал
# range(10) - от 1 до 9 с шагом 1
# range (2, 10) - от 2 до 9 с шагом 1
# range (2, 10, 2) от 2 до 9 с шагом 2

# # тот же цикл работает для строк
# for i in 'abcdefg':
#     print(i)

# # ------------------------------------------------------

# # работа со строками
# text='eat this fruit'
# print(len(text)) # команда посчитает число элементов в списке
# print ('this' in text)
# print (text.isdigit())
# print (text.islower())
# print (text.replace('this','THIS'))
# for c in text:
#     print (c)

# help(print) # вызывает справку по заданному элементу

# # ---------------------------------------------
# # срезы
# text = 'eat these delicious french rolls'
# print(text[0])
# print(text[1])
# print(text[len(text)-1]) # печать последнего элемента
# print(text[-5])
# print(text[:]) # двоеточние = длина массива [0:len(text)-1]
# print(text[:2]) # ноль в интервале можно пропускать
# print(text[2:6])
# print(text[6:-5]) # можно задавать отрицательные коэфициэнты
# print(text[0:len(text):3]) #последняя цифра задает шаг
# print(text[::3]) # шаг можно задавать так
# text=text[0:3]+text[7:9]+text[12:14]
# print(text)

# #-----------------------------
# # списки

# numbers = [1,4,7,10,35,78] #задаем список, способ 1
# print(numbers)

# ran = range(1,6) # задаём список через интервал
# numbers = list(ran) # присваиваем интервалу тип списка
# print(numbers)
# numbers[0]=10 # присваиваем значение элементам списка
# print(numbers)
# for i in numbers:
#     i *=2
#     print(i)
# print(numbers)
# print(f'{len(numbers)} length')

# # дополнительные команды работы со списком
# colours = ['red', 'green', 'blue']
# for e in colours:
#     print (e)

# for e in colours:
#     print (e*2)

# colours.append('red') # команда append добавляет элемент в конец списка
# print(colours)
# print(colours==['red', 'green', 'blue', 'red'])

# # colours.remove('red') # удаляет заданный элемент
# # print(colours)
# del colours[0] # удаляет заданный по счету элемент
# print(colours)

# # --------------------------------------
# # функции
# # программа автоматически определяет тип данных на выходе
# def f(x):   # задаем название функции и операторы
#     if x==1:
#         return 'число'
#     elif x==2.3:
#         return 'не целое'
#     else:
#         return

# arg = 3
# print(f(arg))
# print(type(f(arg)))
